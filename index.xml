<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zikey Vi</title>
    <link>https://dev2ero.github.io/</link>
    <description>Recent content on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Mon, 09 May 2022 11:03:28 +0800</lastBuildDate><atom:link href="https://dev2ero.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fuck the Great Fire Wall</title>
      <link>https://dev2ero.github.io/post/fgfw/</link>
      <pubDate>Mon, 09 May 2022 11:03:28 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/fgfw/</guid>
      <description> 当我老了，回顾一生，就会发觉，我三分之一的生命，都浪费在和GFW作斗争上了。
呜呼！多么宏伟啊！千年前的巨石，砌就秦帝国的坚不可摧；今日那日夜呼啸的服务器集群，彰显共和国非凡的制度自信。
 Top-level solution selection In terms of the ways I have tried myself:
 Use a VPN application Rent an overseas server Subscribe to an airport service  The last option strikes the best balance between price and convenience.
As for the first two option:
 Beware of phishing High cost in time or money Stability is a concern  </description>
    </item>
    
    <item>
      <title>Linux系统调用大全</title>
      <link>https://dev2ero.github.io/post/linux_syscalls/</link>
      <pubDate>Sun, 08 May 2022 21:45:00 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/linux_syscalls/</guid>
      <description>传参规则    arch syscall NR return arg0 arg1 arg2 arg3 arg4 arg5     arm r7 r0 r0 r1 r2 r3 r4 r5   arm64 x8 x0 x0 x1 x2 x3 x4 x5   x86 eax eax ebx ecx edx esi edi ebp   x86_64 rax rax rdi rsi rdx r10 r8 r9    x86_64 系统调用表  以下调用表皆基于linux4.14.0
    NR syscall name %rax arg0 (%rdi) arg1 (%rsi) arg2 (%rdx)     0 read 0x00 unsigned int fd char *buf size_t count   1 write 0x01 unsigned int fd const char *buf size_t count   2 open 0x02 const char *filename int flags umode_t mode   3 close 0x03 unsigned int fd - -   4 stat 0x04 const char *filename struct __old_kernel_stat *statbuf -   5 fstat 0x05 unsigned int fd struct __old_kernel_stat *statbuf -   6 lstat 0x06 const char *filename struct __old_kernel_stat *statbuf -   7 poll 0x07 struct pollfd *ufds unsigned int nfds int timeout   8 lseek 0x08 unsigned int fd off_t offset unsigned int whence   9 mmap 0x09 ?</description>
    </item>
    
    <item>
      <title>Cross debug kernel using qemu-system</title>
      <link>https://dev2ero.github.io/post/qemu_dbg_kernel/</link>
      <pubDate>Sun, 08 May 2022 19:35:11 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/qemu_dbg_kernel/</guid>
      <description>From this post, our goal is tracing the execution procedure from kernel entry to userspace process (busybox init) by using qemu-system and gdb-multiarch. (The concept of ring exists only on x86. Called EL in arm.)
 Preparation qemu-system-arm Compile it from source code or just use sudo apt install qemu-system-arm.
kernel Linux kernel v4.1 for armel as an example. Compiling a linux kernel requires a matched version of gcc. For example, the linux kernel v4.</description>
    </item>
    
    <item>
      <title>嵌入式软件环境搭建一把梭</title>
      <link>https://dev2ero.github.io/post/embeded_env/</link>
      <pubDate>Sun, 08 May 2022 14:08:16 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/embeded_env/</guid>
      <description>\x01 构建 编译工具链 \x02 运行 \x03 调试 </description>
    </item>
    
    <item>
      <title>Awesome Colors</title>
      <link>https://dev2ero.github.io/post/awesome_colors/</link>
      <pubDate>Sat, 07 May 2022 22:53:05 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/awesome_colors/</guid>
      <description>Awesome colors 波尔多红 #4f0009  克莱因蓝 #002FA7  普鲁士蓝 #003153  勃艮第红 #800020  邦迪蓝 #0095b6  木乃伊棕 #8f4b28  卡布里蓝 #1a5599  提香红 #b05923  蒂芙尼蓝 #81d8d0  覆盆子红 #9e2e24  虎皮黄 #e2af42  薄荷绿 #407d52  草黄 #cfb64a  星蓝 #9ab4cd  鸢尾蓝 #418ab4  苋菜紫 #8e2961  钢蓝 #101420  云峰白 #dae3e6  岩石棕 #8c502c  橄榄石绿 #b8ce8e  竹绿 #4fa485  钴蓝 #4692b9  月影白 #c2c4c3  笋皮棕 #6b331a  琉璃蓝 #22406a  黛蓝 #3f4f65  青白 #bee0d0  墨色 #4e606c  黯 #3f545b  玄青 #3b3a4e  漆黑 #141722  玄色 #370708  </description>
    </item>
    
    <item>
      <title>关于Linux桌面的美化工作</title>
      <link>https://dev2ero.github.io/post/beautify_de/</link>
      <pubDate>Sat, 07 May 2022 22:50:57 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/beautify_de/</guid>
      <description>GNU/Linux 的桌面生态，开放虽是好事，但却由此带来了混乱。没有像微软这样的赛博中央政府制定规则，就产生了眼下这般群雄割据的态势。作为用户的我能做的，也只是择巨木而栖 —— 唯二的自由巨头 KDE 与 Gnome，二选其一。幼年气盛，爱好折腾，留下了些许美化的经验。时至今日，能回忆起的已然不多。尽力而为做些记录，为日后回归赛博左派留些盘缠。
KDE plasma UI的（乡土风）现代感，很大部分要归因与透明化的效果。一年前的我也是透明化爱好者，恰逢那时使用 Archlinux + KDE，故记录如下KDE透明化配置方法。KDE自身本就具有各大DE中最为强大的视觉效果定制功能，所以如下所述只是KDE本身能力之外的美化方法：
窗口边框透明化 使用
 https://github.com/ishovkun/SierraBreeze  或
 https://github.com/alex47/BreezeBlurred  在Archlinux上若出现编译错误，可以使用这位老哥打包好的安装包  https://github.com/alex47/BreezeBlurred/issues/24      面板透明化 需要自己魔改，参考如下大佬留下的教程：
https://www.joxrays.com/kde-panel-transparency/
原始论坛帖子：
https://forum.manjaro.org/t/where-can-the-transparency-of-the-kde-panel-be-set/50219
组件透明化 这一需求有现成的工具Kvantum，亦有大佬教程如下：
https://blog.firerain.me/article/4
此外，便是一些其它的效果组件
MacOS风的Dock栏 状态、菜单、任务栏的呈现方式，我个人更倾向与MacOS的方案。比起Windows，牺牲了些许效率，换取美感。
KDE下使用 latte-dock 来获取MacOS风的Dock栏，这样就可以将本身的Panel变为MacOS下的常驻状态栏。
仓库地址：https://github.com/KDE/latte-dock
同时其是可以直接从KDE store一键下载安装的。
音乐可视化 Windows下可以使用Wallpaper engine，Linux就没有这个福分了，只能另寻替代方案。
KDE插件 panon 能达到尚且凑活的效果，可以直接从插件商店一键安装。
Gnome Gnome不像KDE，它没有向用户直接呈现UI定制接口，而是需要用户自行配置。好在Gnome同时也提供了美化总站：https://www.gnome-look.org/
网站中基本涵盖了所有美化选项与资源。但在此之前需要有一些预先配置（出于DE稳定性考虑，默认不将定制接口提供给小白用户）：
安装 gnome-tweaks
sudo apt install gnome-tweaks 使用gnome-tweaks就可以做一些此前没有的定制化了，同时作为后续美化的基本依赖。
安装gnome插件管理器 GNOME Shell Extensions：
https://extensions.gnome.org/
插件管理器的用户接口是基于浏览器提供的，所以按照提示选择安装对应的Chrome或Firefox插件即可。
为了使用用户文件中的主题，需要安装 User Themes 插件并启用：</description>
    </item>
    
    <item>
      <title>Utils</title>
      <link>https://dev2ero.github.io/main/utils/</link>
      <pubDate>Sat, 07 May 2022 19:53:05 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/main/utils/</guid>
      <description>操作系统  Linux kernel lab  https://linux-kernel-labs.github.io/   内核模块编程教程  https://sysprog21.github.io/lkmpg/   MIT 操作系统课程 2021  https://pdos.csail.mit.edu/6.828/2021/schedule.html   Linux inside  https://0xax.gitbooks.io/linux-insides/content/Initialization/linux-initialization-1.html    编程  高级语言源代码与汇编结果的实时对照  https://godbolt.org/   展开编译细节，向你展示C++代码背后的秘密  https://cppinsights.io/   图形化展示你的正则表达式，学习正则好帮手  https://jex.im/regulex/#!flags=&amp;amp;re=%5E(a%7Cb)*%3F%24   C++ STL 算法库  https://zh.cppreference.com/w/cpp/algorithm    指令集   ARMv7 指令集胎教教程
 https://simplemachines.it/doc/arm_inst.pdf    ARMv7 指令集考试小抄
 https://pages.cs.wisc.edu/~markhill/restricted/arm_isa_quick_reference.pdf    ARMv8 指令集考试小抄</description>
    </item>
    
    <item>
      <title>Love</title>
      <link>https://dev2ero.github.io/main/love/</link>
      <pubDate>Sat, 07 May 2022 18:53:05 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/main/love/</guid>
      <description>【  天  时  分  秒 】   function timer() { var start = new Date(2017, 8, 30); var t = new Date() - start; var h = ~~(t / 1000 / 60 / 60 % 24); if (h  </description>
    </item>
    
    <item>
      <title>Friend</title>
      <link>https://dev2ero.github.io/main/friend/</link>
      <pubDate>Sat, 07 May 2022 17:53:05 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/main/friend/</guid>
      <description> https://foada.github.io/ https://fromhex.cn/ https://blog.xiabee.cn/ https://migraine-sudo.github.io/ https://m4x.fun/ https://ifpop.github.io/ https://blog.fkynjyq.com/ https://eacryo.gitee.io/ https://vang3lis.github.io/ https://emptystack.top/ https://l1b0.github.io/ https://yourbutterfly.github.io/   https://eternalsakura13.com/ https://lancern.xyz/ http://www.aloxaf.com/ https://www.ksroido.art/ https://blog.flanker017.me/ https://thunderjie.github.io/ http://blog.eonew.cn/  </description>
    </item>
    
    <item>
      <title>Board</title>
      <link>https://dev2ero.github.io/main/board/</link>
      <pubDate>Sat, 07 May 2022 16:53:05 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/main/board/</guid>
      <description>自用 dotfiles .zshrc export LS_COLORS=&amp;#34;di=34:ln=35:so=32:pi=33:ex=31:bd=34:cd=34:su=30:sg=30:tw=30:ow=30&amp;#34; export PROMPT_EOL_MARK=&amp;#39;↵&amp;#39; ZSH_THEME=&amp;#34;avit&amp;#34; # ZSH_THEME=&amp;#34;robbyrussell&amp;#34; # ZSH_THEME=&amp;#34;refined&amp;#34; # ZSH_THEME=&amp;#34;agnoster&amp;#34; plugins=( git sudo zsh-autosuggestions zsh-syntax-highlighting ) source $ZSH/oh-my-zsh.sh alias l=&amp;#39;/bin/ls&amp;#39; alias ls=&amp;#39;lsd&amp;#39; alias ll=&amp;#39;ls -l&amp;#39; alias la=&amp;#39;ls -a&amp;#39; alias lla=&amp;#39;ls -la&amp;#39; alias lt=&amp;#39;ls --tree&amp;#39; alias ipy=&amp;#39;ipython3&amp;#39; alias py=&amp;#39;python3 -q&amp;#39; alias f.n=&amp;#39;find . -name&amp;#39; alias pms=&amp;#39;python -m http.server&amp;#39; alias v=&amp;#39;nvim&amp;#39; 配合使用：
 lsd美化ls：https://github.com/Peltoche/lsd  lsd需配合nerdfont：https://www.nerdfonts.com/   插件zsh-syntax-highlighting：https://github.com/zsh-users/zsh-syntax-highlighting 插件zsh-autosuggestions：https://github.com/zsh-users/zsh-autosuggestions  init.vim set number set noshowmode set expandtab set tabstop=4 set shiftwidth=4 set encoding=utf-8 set fileencodings=utf-8,gbk,gb2312 inoremap jj &amp;lt;Esc&amp;gt; nnoremap &amp;lt;Esc&amp;gt; ZZ nnoremap &amp;lt;C-t&amp;gt; &amp;lt;C-w&amp;gt;s&amp;lt;C-w&amp;gt;j:terminal&amp;lt;CR&amp;gt;i tnoremap &amp;lt;Esc&amp;gt; &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt; call plug#begin() Plug &amp;#39;neoclide/coc.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://dev2ero.github.io/main/about/</link>
      <pubDate>Sat, 07 May 2022 15:53:05 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/main/about/</guid>
      <description> Yet anothor cyber nyandog
 </description>
    </item>
    
  </channel>
</rss>
