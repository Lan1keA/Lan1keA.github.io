<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embeded on Zikey Vi</title>
    <link>https://cerr.cc/tags/embeded/</link>
    <description>Recent content in Embeded on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Wed, 11 May 2022 16:27:10 +0800</lastBuildDate><atom:link href="https://cerr.cc/tags/embeded/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>华硕梅林固件的编译</title>
      <link>https://cerr.cc/post/compile_asuswrt-merlin/</link>
      <pubDate>Wed, 11 May 2022 16:27:10 +0800</pubDate>
      
      <guid>https://cerr.cc/post/compile_asuswrt-merlin/</guid>
      <description>获取梅林 官网如下：asuswrt-merlin.net
新梅林：https://github.com/RMerl/asuswrt-merlin.ng
旧梅林（停止开发）：https://github.com/RMerl/asuswrt-merlin
这里选用asuswrt-merlin.ng进行编译构建
wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip （下载zip而非clone仓库，节省.git的占用
环境准备 README.txt 给出了编译方式：https://github.com/RMerl/asuswrt-merlin.ng/blob/master/README.TXT
包依赖非常多，所以尽力将本地环境贴合它的编译说明，以避免未知错误。
所以选取 ubuntu:16.04 作为编译平台。
故首先安装docker，快速安装cheatsheet在此：http://zikey.vip/post/some_installation/
拉取ubuntu 16.04镜像并设定共享文件夹：
sudo docker run -it -v /home/zkv/docker_share/:/share ubuntu:16.04 依赖安装 进入docker ubuntu环境后，下载并解压梅林ng：
apt install wget unzip wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip unzip master.zip README.txt 中提到，需安装部分32位依赖包，故先添加32位软件源：
dpkg --add-architecture i386 apt update 此后便可以直接依照说明安装所有依赖包：
apt install libncurses5 libncurses5-dev m4 bison gawk flex libstdc++6-4.7-dev g++-4.7 g++ gengetopt git gitk zlib1g-dev autoconf autopoint libtool-bin shtool autogen mtd-utils intltool sharutils docbook-xsl-* libstdc++5 texinfo dos2unix xsltproc u-boot-tools device-tree-compiler qemu gperf liblzo2-dev uuid-dev build-essential lzma-dev liblzma-dev lzma binutils-dev patch cmake intltool libglib2.</description>
    </item>
    
    <item>
      <title>嵌入式软件环境搭建一把梭</title>
      <link>https://cerr.cc/post/embeded_env/</link>
      <pubDate>Sun, 08 May 2022 14:08:16 +0800</pubDate>
      
      <guid>https://cerr.cc/post/embeded_env/</guid>
      <description>\x01 构建 编译工具链 命名遵循 arch-vendor-(os-)abi 的格式
获取编译工具链的方式，可以直接从这些地方下载到：
arm cortex-a:The GNU Toolchain for the Cortex-A Family Downloads
arm cortex-m:GNU Arm Embedded Toolchain Downloads
Linaro:arm:https://www.linaro.org/downloads/
risc-v:https://github.com/riscv/riscv-gnu-toolchain/releases
mips:https://www.mips.com/develop/tools/compilers/linux-toolchain/
uclibc:https://www.uclibc.org/downloads/binaries/
http://download.ronetix.info/toolchains/
也可以使用buildroot手动构建：
https://buildroot.org/ OS/ABI的匹配 通常情况下，选取编译交叉编译工具链时，指令集、平台之类的内容是不容易弄错的。但 OS/ABI 却是个容易造成故障的点。
举例来讲，在我一次对libnvram.so的编译时，得到的目标ELF文件为：
~$ file libnvram.so libnvram.so: ELF 32-bit LSB shared object, ARM, version 1 (ARM), dynamically linked, not stripped ~$ armv5l-readelf -h libnvram.so ELF Header: Magic: 7f 45 4c 46 01 01 01 61 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2&amp;#39;s complement, little endian Version: 1 (current) OS/ABI: ARM .</description>
    </item>
    
  </channel>
</rss>
