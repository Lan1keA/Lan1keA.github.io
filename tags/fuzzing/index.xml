<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fuzzing on Zikey Vi</title>
    <link>https://dev2ero.github.io/tags/fuzzing/</link>
    <description>Recent content in Fuzzing on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Fri, 20 May 2022 17:57:07 +0800</lastBuildDate><atom:link href="https://dev2ero.github.io/tags/fuzzing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2014-0160 心脏滴血漏洞挖掘与分析</title>
      <link>https://dev2ero.github.io/post/cve-2014-0160/</link>
      <pubDate>Fri, 20 May 2022 17:57:07 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/cve-2014-0160/</guid>
      <description>漏洞编号：CVE-2014-0160
漏洞类型：内存越界访问
漏洞危害：信息泄露
影响范围：OpenSSL1.0.1、OpenSSL 1.0.1a~ OpenSSL 1.0.1f、OpenSSL 1.0.2-beta
漏洞描述：OpenSSL 在实现 TLS（传输层安全协议）和 DTLS（数据报安全传输协议）的心跳包处理逻辑时存在问题。OpenSSL 的 Heartbleed 模块在处理心跳包时没有检查心跳包中的长度字段是否与后续的数据字段一致，攻击者利用该漏洞构造异常数据包，可获取服务器内存中多达 64KB 的数据。这些数据可能会包含证书私钥、用户账号、密码、邮件内容等敏感信息。
 背景知识 简介 传输层安全性协议SSL
SSL 全称 Secure Sockets Layer（安全套接字层协议），要求建立在可靠的传输层协议（TCP）之上，主要提供机密性、认证性及数据完整性服务。SSL 最初（SSL 1.0、SSL2.0、SSL 3.0 版本）由网景公司设计和维护，从 3.1 版本开始，SSL 协议由因特网工程任务小组（IETF）正式接管，并更名为 TLS（传输层安全协议，Transport Layer Security），发展至今已有 TLS 1.0、TLS1.1、TLS1.2 三个版本。
SSL/TLS 协议能够提供的安全服务主要包括：
 认证性——使用数字证书认证服务器和客户端身份，防止身份伪造； 机密性——使用加密算法防止第三方窃听； 完整性——使用消息认证码（MAC）保障数据完整性，防止消息被篡改； 重放保护——通过使用隐式序列号防止重放攻击；  SSL握手过程 客户端获取服务器的数字证书后，协商后续数据传输所使用的对称加密密钥。
SSL Heartbeat  Heartbleed was introduced by the Heartbeat Extension in the OpenSSL version 1.0.11 . This extension enables a low-cost, keepalive mechanism for peers to know that they’re still connected and all is well at the TLS layer.</description>
    </item>
    
    <item>
      <title>ZKV的Fuzzing早教</title>
      <link>https://dev2ero.github.io/post/fuzzer_zkv/</link>
      <pubDate>Wed, 11 May 2022 13:57:01 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/fuzzer_zkv/</guid>
      <description>\x00 早教教程 教程 谷歌的Fuzzing教程
Fuzzingbook
课程 南京大学：软件分析
南京大学：软件分析课程视频
博文 Fuzzing战争: 从刀剑弓斧到星球大战
Fuzzing战争系列之二：不畏浮云遮望眼
练兵场 Fuzzing101
兵器 AFL
AFLplusplus
\x01 学步车AFL 最简单的 fuzzing demo 使用AFL，故先安装：
git clone https://github.com/google/AFL.git cd AFL make -j`nproc` sudo make install 接着准备被测程序源码：
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; #include &amp;lt;signal.h&amp;gt; int vuln(char *str) {  int len = strlen(str);  if(str[0] == &amp;#39;A&amp;#39; &amp;amp;&amp;amp; len == 66)  raise(SIGSEGV);  else if(str[0] == &amp;#39;F&amp;#39; &amp;amp;&amp;amp; len == 6)  raise(SIGSEGV);  else  puts(&amp;#34;\nnothing happened&amp;#34;);  return 0; } int main(int argc, char *argv[]) {  char buf[100]={0};  gets(buf);  printf(buf);  vuln(buf);  return 0; } 使用afl-gcc插装编译：</description>
    </item>
    
  </channel>
</rss>
