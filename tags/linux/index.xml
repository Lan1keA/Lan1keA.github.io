<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Zikey Vi</title>
    <link>https://dev2ero.github.io/tags/linux/</link>
    <description>Recent content in linux on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Thu, 12 May 2022 16:35:52 +0800</lastBuildDate><atom:link href="https://dev2ero.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>QEMU guest的网络配置</title>
      <link>https://dev2ero.github.io/post/qemu-system_net_config/</link>
      <pubDate>Thu, 12 May 2022 16:35:52 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/qemu-system_net_config/</guid>
      <description>首先准备网桥与tun/tap虚拟网卡：
创建网桥br0：
sudo brctl addbr br0 为当前用户创建tun/tap虚拟网卡tap0：
tunctl -t tap0 -u ${USER} 若发现brctl与tunctl命令未找到，则需要先安装相应软件包。这里推荐一个网站，可以方便的查询一个命令在不同软件源中对应的包名：https://command-not-found.com/（专治command not found 20 年）</description>
    </item>
    
    <item>
      <title>华硕梅林固件的编译</title>
      <link>https://dev2ero.github.io/post/compile_asuswrt-merlin/</link>
      <pubDate>Wed, 11 May 2022 16:27:10 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/compile_asuswrt-merlin/</guid>
      <description>获取梅林 官网如下：asuswrt-merlin.net
新梅林：https://github.com/RMerl/asuswrt-merlin.ng
旧梅林（停止开发）：https://github.com/RMerl/asuswrt-merlin
这里选用asuswrt-merlin.ng进行编译构建
wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip （下载zip而非clone仓库，节省.git的占用
环境准备 README.txt 给出了编译方式：https://github.com/RMerl/asuswrt-merlin.ng/blob/master/README.TXT
包依赖非常多，所以尽力将本地环境贴合它的编译说明，以避免未知错误。
所以选取 ubuntu:16.04 作为编译平台。
故首先安装docker，快速安装cheatsheet在此：http://zikey.vip/post/some_installation/
拉取ubuntu 16.04镜像并设定共享文件夹：
sudo docker run -it -v /home/zkv/docker_share/:/share ubuntu:16.04 依赖安装 进入docker ubuntu环境后，下载并解压梅林ng：
apt install wget unzip wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip unzip master.zip README.txt 中提到，需安装部分32位依赖包，故先添加32位软件源：
dpkg --add-architecture i386 apt update 此后便可以直接依照说明安装所有依赖包：
apt install libncurses5 libncurses5-dev m4 bison gawk flex libstdc++6-4.7-dev g++-4.7 g++ gengetopt git gitk zlib1g-dev autoconf autopoint libtool-bin shtool autogen mtd-utils intltool sharutils docbook-xsl-* libstdc++5 texinfo dos2unix xsltproc u-boot-tools device-tree-compiler qemu gperf liblzo2-dev uuid-dev build-essential lzma-dev liblzma-dev lzma binutils-dev patch cmake intltool libglib2.</description>
    </item>
    
    <item>
      <title>一些配环境的cheasheet</title>
      <link>https://dev2ero.github.io/post/some_installation/</link>
      <pubDate>Tue, 10 May 2022 21:13:54 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/some_installation/</guid>
      <description>作为一个系统重装爱好者和硬件收集拾荒人，为了减少在环境配置上浪费的生命，记录常用环境配置命令用以直接复制粘贴
 个人 apt 源 Linux 初始环境软件安装 sudo apt install zsh git man man-db manpages ssh neovim tmux \ 	gcc g++ gdb gdb-multiarch gdbserver flex bison \ 	curl wget netcat net-tools nmap tcpdump \ 	python3 ipython3 python-is-python3 python3-pip \ 	build-essential binutils xxd strace libncurses5 \ 	neofetch zip unzip ncdu htop dotfiles 快速就位 git clone https://github.com/dev2ero/dotfiles.git sh -c &amp;#34;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&amp;#34; git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.</description>
    </item>
    
    <item>
      <title>构建与运行嵌入式linux虚拟机</title>
      <link>https://dev2ero.github.io/post/build_run_embeded_linux_vm/</link>
      <pubDate>Tue, 10 May 2022 20:59:43 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/build_run_embeded_linux_vm/</guid>
      <description>Easymode 通过git或http获取buildroot：
官网：https://buildroot.org/
git：git clone https://git.busybox.net/buildroot
进入buildroot根目录，可以看到一个叫configs的文件夹，其中记录了许多硬件平台和部分qemu虚拟平台的默认配置参数。执行 ls configs | grep qemu，可以看到：
qemu_aarch64_sbsa_defconfig qemu_aarch64_virt_defconfig qemu_arm_versatile_defconfig qemu_arm_versatile_nommu_defconfig qemu_arm_vexpress_defconfig qemu_arm_vexpress_tz_defconfig qemu_m68k_mcf5208_defconfig qemu_m68k_q800_defconfig qemu_microblazebe_mmu_defconfig qemu_microblazeel_mmu_defconfig qemu_mips32r2el_malta_defconfig qemu_mips32r2_malta_defconfig qemu_mips32r6el_malta_defconfig qemu_mips32r6_malta_defconfig qemu_mips64el_malta_defconfig qemu_mips64_malta_defconfig qemu_mips64r6el_malta_defconfig qemu_mips64r6_malta_defconfig qemu_nios2_10m50_defconfig qemu_or1k_defconfig qemu_ppc64_e5500_defconfig qemu_ppc64le_powernv8_defconfig qemu_ppc64le_pseries_defconfig qemu_ppc64_pseries_defconfig qemu_ppc_bamboo_defconfig qemu_ppc_e500mc_defconfig qemu_ppc_g3beige_defconfig qemu_ppc_mac99_defconfig qemu_ppc_mpc8544ds_defconfig qemu_riscv32_virt_defconfig qemu_riscv64_virt_defconfig qemu_s390x_defconfig qemu_sh4eb_r2d_defconfig qemu_sh4_r2d_defconfig qemu_sparc64_sun4u_defconfig qemu_sparc_ss10_defconfig qemu_x86_64_defconfig qemu_x86_defconfig qemu_xtensa_lx60_defconfig qemu_xtensa_lx60_nommu_defconfig 举例来讲，我们使用 make qemu_arm_vexpress_defconfig，将qemu模拟的vexperss平台设为编译目标：
make qemu_arm_vexpress_defconfig make 或者使用 make menuconfig 手动配置。
等待编译完成，即可在output文件夹中拿到相应目标文件：
output/images/zImage # 内核 output/images/rootfs.ext2 # ext2根文件系统镜像 output/images/vexpress-v2p-ca9.dtb # arm设备树 使用qemu-system-arm运行得到的linux：</description>
    </item>
    
    <item>
      <title>Linux系统调用大全</title>
      <link>https://dev2ero.github.io/post/linux_syscalls/</link>
      <pubDate>Sun, 08 May 2022 21:45:00 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/linux_syscalls/</guid>
      <description>传参规则    arch syscall NR return arg0 arg1 arg2 arg3 arg4 arg5     arm r7 r0 r0 r1 r2 r3 r4 r5   arm64 x8 x0 x0 x1 x2 x3 x4 x5   x86 eax eax ebx ecx edx esi edi ebp   x86_64 rax rax rdi rsi rdx r10 r8 r9    x86_64 系统调用表  以下调用表皆基于linux4.14.0
    NR syscall name %rax arg0 (%rdi) arg1 (%rsi) arg2 (%rdx)     0 read 0x00 unsigned int fd char *buf size_t count   1 write 0x01 unsigned int fd const char *buf size_t count   2 open 0x02 const char *filename int flags umode_t mode   3 close 0x03 unsigned int fd - -   4 stat 0x04 const char *filename struct __old_kernel_stat *statbuf -   5 fstat 0x05 unsigned int fd struct __old_kernel_stat *statbuf -   6 lstat 0x06 const char *filename struct __old_kernel_stat *statbuf -   7 poll 0x07 struct pollfd *ufds unsigned int nfds int timeout   8 lseek 0x08 unsigned int fd off_t offset unsigned int whence   9 mmap 0x09 ?</description>
    </item>
    
    <item>
      <title>Cross debug kernel using qemu-system</title>
      <link>https://dev2ero.github.io/post/qemu_dbg_kernel/</link>
      <pubDate>Sun, 08 May 2022 19:35:11 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/qemu_dbg_kernel/</guid>
      <description>From this post, our goal is tracing the execution procedure from kernel entry to userspace process (busybox init) by using qemu-system and gdb-multiarch. (The concept of ring exists only on x86. Called EL in arm.)
 Preparation qemu-system-arm Compile it from source code or just use sudo apt install qemu-system-arm.
kernel Linux kernel v4.1 for armel as an example. Compiling a linux kernel requires a matched version of gcc. For example, the linux kernel v4.</description>
    </item>
    
    <item>
      <title>嵌入式软件环境搭建一把梭</title>
      <link>https://dev2ero.github.io/post/embeded_env/</link>
      <pubDate>Sun, 08 May 2022 14:08:16 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/embeded_env/</guid>
      <description>\x01 构建 编译工具链 \x02 运行 \x03 调试 </description>
    </item>
    
    <item>
      <title>关于Linux桌面的美化工作</title>
      <link>https://dev2ero.github.io/post/beautify_de/</link>
      <pubDate>Sat, 07 May 2022 22:50:57 +0800</pubDate>
      
      <guid>https://dev2ero.github.io/post/beautify_de/</guid>
      <description>GNU/Linux 的桌面生态，开放虽是好事，但却由此带来了混乱。没有像微软这样的赛博中央政府制定规则，就产生了眼下这般群雄割据的态势。作为用户的我能做的，也只是择巨木而栖 —— 唯二的自由巨头 KDE 与 Gnome，二选其一。幼年气盛，爱好折腾，留下了些许美化的经验。时至今日，能回忆起的已然不多。尽力而为做些记录，为日后回归赛博左派留些盘缠。
KDE plasma UI的（乡土风）现代感，很大部分要归因与透明化的效果。一年前的我也是透明化爱好者，恰逢那时使用 Archlinux + KDE，故记录如下KDE透明化配置方法。KDE自身本就具有各大DE中最为强大的视觉效果定制功能，所以如下所述只是KDE本身能力之外的美化方法：
窗口边框透明化 使用
 https://github.com/ishovkun/SierraBreeze  或
 https://github.com/alex47/BreezeBlurred  在Archlinux上若出现编译错误，可以使用这位老哥打包好的安装包  https://github.com/alex47/BreezeBlurred/issues/24      面板透明化 需要自己魔改，参考如下大佬留下的教程：
https://www.joxrays.com/kde-panel-transparency/
原始论坛帖子：
https://forum.manjaro.org/t/where-can-the-transparency-of-the-kde-panel-be-set/50219
组件透明化 这一需求有现成的工具Kvantum，亦有大佬教程如下：
https://blog.firerain.me/article/4
此外，便是一些其它的效果组件
MacOS风的Dock栏 状态、菜单、任务栏的呈现方式，我个人更倾向与MacOS的方案。比起Windows，牺牲了些许效率，换取美感。
KDE下使用 latte-dock 来获取MacOS风的Dock栏，这样就可以将本身的Panel变为MacOS下的常驻状态栏。
仓库地址：https://github.com/KDE/latte-dock
同时其是可以直接从KDE store一键下载安装的。
音乐可视化 Windows下可以使用Wallpaper engine，Linux就没有这个福分了，只能另寻替代方案。
KDE插件 panon 能达到尚且凑活的效果，可以直接从插件商店一键安装。
Gnome Gnome不像KDE，它没有向用户直接呈现UI定制接口，而是需要用户自行配置。好在Gnome同时也提供了美化总站：https://www.gnome-look.org/
网站中基本涵盖了所有美化选项与资源。但在此之前需要有一些预先配置（出于DE稳定性考虑，默认不将定制接口提供给小白用户）：
安装 gnome-tweaks
sudo apt install gnome-tweaks 使用gnome-tweaks就可以做一些此前没有的定制化了，同时作为后续美化的基本依赖。
接下来安装gnome插件管理器 GNOME Shell Extensions：
插件管理器的用户接口是基于浏览器提供的，需安装对应的Chrome或Firefox插件即可。
对于Chrome，除了可以从Chrome商店下载外，也可以直接使用软件源里的包安装：
sudo apt install chrome-gnome-shell Firefox插件地址为：https://addons.</description>
    </item>
    
  </channel>
</rss>
