<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Zikey Vi</title>
    <link>https://cerr.cc/tags/linux/</link>
    <description>Recent content in Linux on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Tue, 19 Jul 2022 10:50:06 +0800</lastBuildDate><atom:link href="https://cerr.cc/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手机变身小主机？！</title>
      <link>https://cerr.cc/post/mobile_linux/</link>
      <pubDate>Tue, 19 Jul 2022 10:50:06 +0800</pubDate>
      
      <guid>https://cerr.cc/post/mobile_linux/</guid>
      <description>快递还在路上…… 背景知识 ref：
https://www.jianshu.com/p/d960a6f517d8 Fastboot 一个通信协议，用于直接向安卓手机Flash的不同分区中写入数据。
https://android.googlesource.com/platform/system/core/+/refs/heads/master/fastboot/
Recovery 一个单独的分区，内可包含一个恢复用的迷你系统，如TWRP。
安卓设备分区 https://source.android.com/devices/bootloader/partitions	</description>
    </item>
    
    <item>
      <title>ZKV的Linux Kernel学习之路</title>
      <link>https://cerr.cc/post/linuxer_zkv/</link>
      <pubDate>Mon, 13 Jun 2022 17:41:00 +0800</pubDate>
      
      <guid>https://cerr.cc/post/linuxer_zkv/</guid>
      <description>内核文档 文档资源总览：https://www.kernel.org/doc/
Latest kernel的HTML文档页：https://www.kernel.org/doc/html/latest
但用浏览器看文档总归是不如在终端内直接man 9 printk来的爽。为啥是man 9？看看man man便知：
1 Executable programs or shell commands 2 System calls (functions provided by the kernel) 3 Library calls (functions within program libraries) 4 Special files (usually found in /dev) 5 File formats and conventions, e.g. /etc/passwd 6 Games 7 Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7) 8 System administration commands (usually only for root) 9 Kernel routines [Non standard] 但默认情况下会：</description>
    </item>
    
    <item>
      <title>记一次qemu-system-arm仿真的排错</title>
      <link>https://cerr.cc/post/qemu_armv8_dbg/</link>
      <pubDate>Thu, 26 May 2022 15:51:22 +0800</pubDate>
      
      <guid>https://cerr.cc/post/qemu_armv8_dbg/</guid>
      <description>🕵️探案 在一次尝试使用qemu-system-arm对于asuswrt的固件进行仿真运行时，出现了十分诡异的问题：整个qemu-system、linux内核、固件文件系统运行完全正常，除了在使用到openssl时：
admin@(none):/tmp/home/root# openssl [ 9.765639] openssl (274): undefined instruction: pc=b6cf31a8 [ 9.765770] CPU: 0 PID: 274 Comm: openssl Tainted: G W 4.1.17+ #10 [ 9.766031] Hardware name: Generic DT based system [ 9.766149] task: cef58b40 ti: cef80000 task.ti: cef80000 [ 9.766367] PC is at 0xb6cf31a8 [ 9.766423] LR is at 0xb6dcedb0 [ 9.766475] pc : [&amp;lt;b6cf31a8&amp;gt;] lr : [&amp;lt;b6dcedb0&amp;gt;] psr: 200b0010 [ 9.766475] sp : bee2c7c8 ip : 00000000 fp : 00000000 [ 9.</description>
    </item>
    
    <item>
      <title>CVE-2016-5195 Linux DirtyCOW漏洞分析</title>
      <link>https://cerr.cc/post/cve-2016-5195/</link>
      <pubDate>Tue, 24 May 2022 17:43:25 +0800</pubDate>
      
      <guid>https://cerr.cc/post/cve-2016-5195/</guid>
      <description>背景知识 DirtyCOW https://dirtycow.ninja/ https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails Copy on Write https://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html https://blog.csdn.net/puliao4167/article/details/87894191 Page Cache https://en.wikipedia.org/wiki/Page_cache mmap https://www.cnblogs.com/huxiao-tee/p/4660352.html 内核文件系统 https://www.cnblogs.com/huxiao-tee/p/4657851.html 漏洞复现 环境准备 Linux Kernel 选取一个有漏洞的版本4.4.0，下载ubuntu对应的deb包。解压得到./boot/vmlinuz-4.4.0-31-generic
wget http://security.ubuntu.com/ubuntu/pool/main/l/linux/linux-image-4.4.0-31-generic_4.4.0-31.50_amd64.deb ar xv linux-image-4.4.0-31-generic_4.4.0-31.50_amd64.deb tar jxvf data.tar.bz2 漏洞分析 </description>
    </item>
    
    <item>
      <title>关于Linux下的网卡与网络设备</title>
      <link>https://cerr.cc/post/nic/</link>
      <pubDate>Mon, 23 May 2022 23:21:12 +0800</pubDate>
      
      <guid>https://cerr.cc/post/nic/</guid>
      <description>ip与ifconfig命令输出 ~$ ip a eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:02:e4:a7 brd ff:ff:ff:ff:ff:ff inet 192.168.188.129/24 brd 192.168.188.255 scope global dynamic noprefixroute eth0 valid_lft 1126sec preferred_lft 1126sec inet6 fe80::20c:29ff:fe02:e4a7/64 scope link noprefixroute valid_lft forever preferred_lft forever ~$ ifconfig eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 192.168.188.129 netmask 255.255.255.0 broadcast 192.168.188.255 inet6 fe80::20c:29ff:fe02:e4a7 prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; ether 00:0c:29:02:e4:a7 txqueuelen 1000 (Ethernet) RX packets 959 bytes 62153 (60.</description>
    </item>
    
    <item>
      <title>CVE-2021-3156 sudo 提权漏洞分析</title>
      <link>https://cerr.cc/post/cve-2021-3156/</link>
      <pubDate>Fri, 13 May 2022 23:02:59 +0800</pubDate>
      
      <guid>https://cerr.cc/post/cve-2021-3156/</guid>
      <description>CVE-2021-3156是sudo中存在一个堆溢出漏洞。影响从1.8.2~1.8.31p2下的所有旧版本sudo，以及1.9.0~1.9.5p1的所有稳定版sudo。可以使得任何没有特权的用户均可使用默认的sudo配置获取root权限
环境准备 使用apt获取软件源提供的sudo源码：
sudo apt source sudo 却被告知：
NOTICE: &amp;#39;sudo&amp;#39; packaging is maintained in the &amp;#39;Git&amp;#39; version control system at: https://salsa.debian.org/sudo-team/sudo.git Please use: git clone https://salsa.debian.org/sudo-team/sudo.git to retrieve the latest (possibly unreleased) updates to the package. 于是听话，从git仓库获取源码：
git clone https://salsa.debian.org/sudo-team/sudo.git 接下来进行构建：
# clone configure make git reset --hard 36955b3ef399efeea25824d32e6cfbaa444e9f07 # v1.9.5p1 CFLAGS+=-g ./configure --sysconfdir=`pwd`/examples --with-plugindir=`pwd`/plugins/sudoers/.libs make -j`nproc` 构建完成后在root用户下可以执行测试：
LD_LIBRARY_PATH=./lib/util/.libs/ src/.libs/sudo 验证编译目标的确存在漏洞，前需事先创建名为 sudoedit 的 sudo 的软链接以绕过后续检查：
cd src/.libs ln -s sudo sudoedit cd .</description>
    </item>
    
    <item>
      <title>华硕梅林固件的编译</title>
      <link>https://cerr.cc/post/compile_asuswrt-merlin/</link>
      <pubDate>Wed, 11 May 2022 16:27:10 +0800</pubDate>
      
      <guid>https://cerr.cc/post/compile_asuswrt-merlin/</guid>
      <description>获取梅林 官网如下：asuswrt-merlin.net
新梅林：https://github.com/RMerl/asuswrt-merlin.ng
旧梅林（停止开发）：https://github.com/RMerl/asuswrt-merlin
这里选用asuswrt-merlin.ng进行编译构建
wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip （下载zip而非clone仓库，节省.git的占用
环境准备 README.txt 给出了编译方式：https://github.com/RMerl/asuswrt-merlin.ng/blob/master/README.TXT
包依赖非常多，所以尽力将本地环境贴合它的编译说明，以避免未知错误。
所以选取 ubuntu:16.04 作为编译平台。
故首先安装docker，快速安装cheatsheet在此：http://zikey.vip/post/some_installation/
拉取ubuntu 16.04镜像并设定共享文件夹：
sudo docker run -it -v /home/zkv/docker_share/:/share ubuntu:16.04 依赖安装 进入docker ubuntu环境后，下载并解压梅林ng：
apt install wget unzip wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip unzip master.zip README.txt 中提到，需安装部分32位依赖包，故先添加32位软件源：
dpkg --add-architecture i386 apt update 此后便可以直接依照说明安装所有依赖包：
apt install libncurses5 libncurses5-dev m4 bison gawk flex libstdc++6-4.7-dev g++-4.7 g++ gengetopt git gitk zlib1g-dev autoconf autopoint libtool-bin shtool autogen mtd-utils intltool sharutils docbook-xsl-* libstdc++5 texinfo dos2unix xsltproc u-boot-tools device-tree-compiler qemu gperf liblzo2-dev uuid-dev build-essential lzma-dev liblzma-dev lzma binutils-dev patch cmake intltool libglib2.</description>
    </item>
    
    <item>
      <title>一些配环境的cheasheet</title>
      <link>https://cerr.cc/post/some_installation/</link>
      <pubDate>Tue, 10 May 2022 21:13:54 +0800</pubDate>
      
      <guid>https://cerr.cc/post/some_installation/</guid>
      <description>作为一个系统重装爱好者和硬件收集拾荒人，为了减少在环境配置上浪费的生命，记录常用环境配置命令用以直接复制粘贴
个人 apt 源 Linux 初始环境软件安装 基本组件 sudo apt install zsh git man man-db manpages ssh neovim tmux \ curl wget netcat net-tools nmap tcpdump figlet \ binutils xxd strace libncurses5-dev traceroute \ neofetch zip unzip ncdu htop dosfstools nyancat cmatrix 开发与调试组件 sudo apt install gcc g++ gdb gdb-multiarch gdbserver flex bison make cmake clangd \ python3 ipython3 python-is-python3 python3-pip build-essential ninja-buildw dotfiles 快速就位 git clone https://github.com/dev2ero/dotfiles.git sh -c &amp;#34;$(curl -fsSL https://gitee.</description>
    </item>
    
    <item>
      <title>构建与运行嵌入式linux虚拟机</title>
      <link>https://cerr.cc/post/build_run_embeded_linux_vm/</link>
      <pubDate>Tue, 10 May 2022 20:59:43 +0800</pubDate>
      
      <guid>https://cerr.cc/post/build_run_embeded_linux_vm/</guid>
      <description>Easymode Default 通过git或http获取buildroot：
官网：https://buildroot.org/
git：git clone https://git.buildroot.net/buildroot
进入buildroot根目录，可以看到一个叫configs的文件夹，其中记录了许多硬件平台和部分qemu虚拟平台的默认配置参数。执行 ls configs | grep qemu，可以看到：
qemu_aarch64_sbsa_defconfig qemu_aarch64_virt_defconfig qemu_arm_versatile_defconfig qemu_arm_versatile_nommu_defconfig qemu_arm_vexpress_defconfig qemu_arm_vexpress_tz_defconfig qemu_m68k_mcf5208_defconfig qemu_m68k_q800_defconfig qemu_microblazebe_mmu_defconfig qemu_microblazeel_mmu_defconfig qemu_mips32r2el_malta_defconfig qemu_mips32r2_malta_defconfig qemu_mips32r6el_malta_defconfig qemu_mips32r6_malta_defconfig qemu_mips64el_malta_defconfig qemu_mips64_malta_defconfig qemu_mips64r6el_malta_defconfig qemu_mips64r6_malta_defconfig qemu_nios2_10m50_defconfig qemu_or1k_defconfig qemu_ppc64_e5500_defconfig qemu_ppc64le_powernv8_defconfig qemu_ppc64le_pseries_defconfig qemu_ppc64_pseries_defconfig qemu_ppc_bamboo_defconfig qemu_ppc_e500mc_defconfig qemu_ppc_g3beige_defconfig qemu_ppc_mac99_defconfig qemu_ppc_mpc8544ds_defconfig qemu_riscv32_virt_defconfig qemu_riscv64_virt_defconfig qemu_s390x_defconfig qemu_sh4eb_r2d_defconfig qemu_sh4_r2d_defconfig qemu_sparc64_sun4u_defconfig qemu_sparc_ss10_defconfig qemu_x86_64_defconfig qemu_x86_defconfig qemu_xtensa_lx60_defconfig qemu_xtensa_lx60_nommu_defconfig 举例来讲，我们使用 make qemu_arm_vexpress_defconfig，将qemu模拟的vexperss平台设为编译目标：
make qemu_arm_vexpress_defconfig make 或者使用 make menuconfig 手动配置。
等待编译完成，即可在output文件夹中拿到相应目标文件：
output/images/zImage # 内核 output/images/rootfs.ext2 # ext2根文件系统镜像 output/images/vexpress-v2p-ca9.</description>
    </item>
    
    <item>
      <title>Linux系统调用大全</title>
      <link>https://cerr.cc/post/linux_syscalls/</link>
      <pubDate>Sun, 08 May 2022 21:45:00 +0800</pubDate>
      
      <guid>https://cerr.cc/post/linux_syscalls/</guid>
      <description>传参规则 arch syscall NR return arg0 arg1 arg2 arg3 arg4 arg5 arm r7 r0 r0 r1 r2 r3 r4 r5 arm64 x8 x0 x0 x1 x2 x3 x4 x5 x86 eax eax ebx ecx edx esi edi ebp x86_64 rax rax rdi rsi rdx r10 r8 r9 x86_64 系统调用表 以下调用表皆基于linux4.14.0
NR syscall name %rax arg0 (%rdi) arg1 (%rsi) arg2 (%rdx) 0 read 0x00 unsigned int fd char *buf size_t count 1 write 0x01 unsigned int fd const char *buf size_t count 2 open 0x02 const char *filename int flags umode_t mode 3 close 0x03 unsigned int fd - - 4 stat 0x04 const char *filename struct __old_kernel_stat *statbuf - 5 fstat 0x05 unsigned int fd struct __old_kernel_stat *statbuf - 6 lstat 0x06 const char *filename struct __old_kernel_stat *statbuf - 7 poll 0x07 struct pollfd *ufds unsigned int nfds int timeout 8 lseek 0x08 unsigned int fd off_t offset unsigned int whence 9 mmap 0x09 ?</description>
    </item>
    
    <item>
      <title>Cross debug kernel using qemu-system</title>
      <link>https://cerr.cc/post/qemu_dbg_kernel/</link>
      <pubDate>Sun, 08 May 2022 19:35:11 +0800</pubDate>
      
      <guid>https://cerr.cc/post/qemu_dbg_kernel/</guid>
      <description>From this post, our goal is tracing the execution procedure from kernel entry to userspace process (busybox init) by using qemu-system and gdb-multiarch.
Preparation qemu-system-arm Compile it from source code or just use sudo apt install qemu-system-arm.
kernel Linux kernel v4.1 for armel as an example. Compiling a linux kernel requires a matched version of gcc. For example, the linux kernel v4.1 requires the gcc version between 3 and 5:</description>
    </item>
    
    <item>
      <title>嵌入式软件环境搭建一把梭</title>
      <link>https://cerr.cc/post/embeded_env/</link>
      <pubDate>Sun, 08 May 2022 14:08:16 +0800</pubDate>
      
      <guid>https://cerr.cc/post/embeded_env/</guid>
      <description>\x01 构建 手动选取编译工具链 命名遵循 arch-vendor-(os-)abi 的格式
获取编译工具链的方式，可以直接从这些地方下载到：
arm cortex-a:The GNU Toolchain for the Cortex-A Family Downloads
arm cortex-m:GNU Arm Embedded Toolchain Downloads
Linaro:arm:https://www.linaro.org/downloads/
risc-v:https://github.com/riscv/riscv-gnu-toolchain/releases
mips:https://www.mips.com/develop/tools/compilers/linux-toolchain/
uclibc:https://www.uclibc.org/downloads/binaries/
http://download.ronetix.info/toolchains/
也可以使用buildroot手动构建：
https://buildroot.org/ OS/ABI的匹配 通常情况下，选取编译交叉编译工具链时，指令集、平台之类的内容是不容易弄错的。但 OS/ABI 却是个容易造成故障的点。
举例来讲，在我一次对libnvram.so的编译时，得到的目标ELF文件为：
~$ file libnvram.so libnvram.so: ELF 32-bit LSB shared object, ARM, version 1 (ARM), dynamically linked, not stripped ~$ armv5l-readelf -h libnvram.so ELF Header: Magic: 7f 45 4c 46 01 01 01 61 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2&amp;#39;s complement, little endian Version: 1 (current) OS/ABI: ARM .</description>
    </item>
    
    <item>
      <title>关于Linux桌面的美化工作</title>
      <link>https://cerr.cc/post/beautify_de/</link>
      <pubDate>Sat, 07 May 2022 22:50:57 +0800</pubDate>
      
      <guid>https://cerr.cc/post/beautify_de/</guid>
      <description>GNU/Linux 的桌面生态，开放虽是好事，但却由此带来了混乱。没有像微软这样的赛博中央政府制定规则，就产生了眼下这般群雄割据的态势。作为用户的我能做的，也只是择巨木而栖 —— 唯二的自由巨头 KDE 与 Gnome，二选其一~~（LXQt大法好）~~（当年煮酒论DE，今日叛逃用WM）（i3大法好）。幼年气盛，爱好折腾，留下了些许美化的经验。时至今日，能回忆起的已然不多。尽力而为做些记录，为日后回归赛博左派留些盘缠。
概念拆解 被Windows驯化得温顺从良的我，当年对显示屏上花花绿绿的GUI组件并无概念。商业操作系统将一切整合，成为一个整体，迷惑我说：“这便是操作系统图形化用户接口”。今日慢慢爬出泥沼，留攻略如下：
🎵我有一台树莓派我从来不开机。接通电源、引导器醒来、启动内核、唤醒pid 1，此时来到Virtual Terminal下的/dev/tty1。在自动登录GUI的设定下，有如下朋友先后会来迎接我：
WS：Window System 图形化的基本环境 举例： X11 Wayland ref： https://en.wikipedia.org/wiki/Windowing_system DM：Display manager 图形化的登陆管理器，作用类似于login程序 可以在此选择登录后想要启动的WM或DE 举例： GDM, GNOME implementation SDDM, recommended display manager for KDE Plasma 5 and LXQt. Successor to KDM. LightDM, a lightweight, modular, cross-desktop, fully themeable desktop display manager by Canonical Ltd. ref： https://en.wikipedia.org/wiki/X_display_manager WM：Window manager 控制窗口行为的图形化子系统 举例： i3（for X11） Sway（i3 clone for Wayland） KWin Openbox ref： https://en.</description>
    </item>
    
  </channel>
</rss>
