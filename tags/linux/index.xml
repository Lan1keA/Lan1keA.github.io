<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Zikey Vi</title>
    <link>https://cerr.cc/tags/linux/</link>
    <description>Recent content in Linux on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Mon, 08 Aug 2022 14:17:44 +0800</lastBuildDate><atom:link href="https://cerr.cc/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用QEMU&#43;GDB调试Linux内核</title>
      <link>https://cerr.cc/post/qemu_gdb_vmlinux/</link>
      <pubDate>Mon, 08 Aug 2022 14:17:44 +0800</pubDate>
      
      <guid>https://cerr.cc/post/qemu_gdb_vmlinux/</guid>
      <description>环境准备 QEMU 的手动构建 获取QEMU源码：
git clone https://gitlab.com/qemu-project/qemu.git cd qemu git submodule init git submodule update --recursive 本次使用x86_64内核的情况下，configure配置如下：
./configure --target-list=x86_64-softmmu --enable-debug 编译并安装：
make -j`nproc` sudo make install 使用buildroot一键构建rootfs+kernel buildroot自动构建过程若出现网络不畅，自备梯子，并设定shell变量all_proxy、http_proxy、https_proxy用于代理wget、curl等工具即可。参见：https://cerr.cc/post/fgfw/
git clone https://git.buildroot.net/buildroot cd buildroot make qemu_x86_64_defconfig make linux-menuconfig 使用 / 搜索 DEBUG_INFO 符号（即配置文件中的CONFIG_DEBUG_INFO符号） 设定路径与依赖，将其打开。
以同样的方式再将 GDB_SCRIPT 打开、RANDOMIZE_BASE 关闭。
此后即可直接make构建。
make # 编译构建中…… # ☕️、☕️、☕️…… # 编译构建完成 output/images/start-qemu.sh 测试是否正常启动：（上一步若关闭了RANDOMIZE_BASE，则无需向kernel传递nokaslr参数）
cd output/images qemu-system-x86_64 -M pc -kernel bzImage \ -drive file=rootfs.ext2,if=virtio,format=raw \ -append &amp;#34;rootwait root=/dev/vda console=tty1 console=ttyS0 nokaslr&amp;#34; \ -net nic,model=virtio -net user \ -nographic -s -S -nographic 全部信息输出至host stdio 若否，而是使用-serial stdio，则只会将guest的串口数据输出至host stdio，其余则会输出至启动的vncserver -s shorthand for -gdb tcp::1234 -S freeze CPU at startup (use &amp;lsquo;c&amp;rsquo; to start execution) 此时于另一个tty、pts：</description>
    </item>
    
    <item>
      <title>手机变身小主机？！</title>
      <link>https://cerr.cc/post/mobile_linux/</link>
      <pubDate>Tue, 19 Jul 2022 10:50:06 +0800</pubDate>
      
      <guid>https://cerr.cc/post/mobile_linux/</guid>
      <description>快递还在路上…… 话说我大学专业之所以选了计算机，除去高二于学霸本联想G510上玩过《看门狗》的原因外，就是因为有着折腾二手安卓机的爱好了。这一兴趣一直延续到了大学，以至于我童叟无欺的闲鱼账号被人怀疑为是机贩子账号 （😤是可忍，孰不可忍） 。直至大三开始搞到了外快，可以不再为一台多次易主的设备在经济上精打细算，便渐渐失去了往日的激情。果然太容易得到的东西，就会失宠。
还记得大二那次Essential Phone换LG V30的交易，在我和那位小米前员工约定的地铁站内，他说，从我身上仿佛看见了当年的他，为一台心心念念的破旧设备奔波几十里却满心欢喜。两名垃机佬相视一笑，心照不宣，你东我西，从此再无交集……（😭
Linux On a Phone 啥说是手机上的Linux？安卓的内核本来就是Linux呀？！
但那是Android/Linux，而我们本次的目标是GNU/Linux，将mainline kernel与GNU utils运行与手机之上。可以比喻成将手机刷成了一台运行了桌面级系统的小主机？
关于Android的Linux内核与mainline Linux内核的关系，参见Google的说明：https://source.android.com/devices/architecture/kernel?hl=zh-cn
有若干项目试图接近这个目标，其中最有名的应该还是Ubuntu Touch了。但经过一些调研后，我发现Ubuntu Touch并不是我满意的选择……
Ubuntu Touch https://ubuntu-touch.io/
Ubuntu Touch借助了Haium以解决纷繁复杂的硬件驱动支持问题，虽然由此达成了将GNU utils无缝运行于移动设备的目的，但却也因此被迫舍弃了mainline kernel。具体技术架构参见https://halium.org/即可。
似乎Ubuntu Touch的定位主要瞄准了Android，而非作为一个完全可定制的极客OS，所以在包管理、分区读写等方面并不能做到如同Ubuntu desktop一样的体验。再加上其没有使用mainline kernel不符合我的需求，故而弃之。
Mobian https://mobian.org/
https://wiki.mobian.org/
Mobian，即mobile debian，好的地方在于其已为大家广泛熟悉的apt+dpkg包管理工具和软件源，且其使用了mainline内核。但缺乏对于大量设备的支持。Mobian的设备支持列表在这里：https://wiki.mobian.org/doku.php?id=devices。可以看到除去几款国内难以购买、价格高昂、配置低下的开源手机外，就只有一加6和小米Pocophone F1两款骁龙845机型了。
Droidian https://droidian.org/
Mobian的Haium版本，借由和Ubuntu Touch类似的方案，达成支持更多设备的目的。但也因此放弃了mainline kernel。
postmarketOS https://postmarketos.org/
postmarketOS基于Alpine Linux，为busybox + musl libc的解决方案。在采用mainline kernel的mobile发行版中社区最大，维护最活跃。其支持的设备列表与支持情况可以于此查到：https://wiki.postmarketos.org/wiki/Devices
以我手上的Xiaomi Mi Note2为例，对其的许多驱动支持是postmarketOS独一份的，比如此前修复的Wi-Fi模块：https://gitlab.com/postmarketOS/pmaports/-/merge_requests/3271
postmarketOS集成了几乎所有为mobile生态做出努力的上层桌面环境：https://wiki.postmarketos.org/wiki/Category:Interface。且与软件源中提供了一键安装与切换。不同设备所适合的DE并不同，我此前的Xiaomi Redmi2使用KDE Plasma mobile最舒适，而现在手上这台Xiaomi Mi Note2运行Phosh才最稳定。
其亦有国内软件源镜像的支持：https://mirrors.tuna.tsinghua.edu.cn/postmarketOS/
换源说明：https://mirrors.tuna.tsinghua.edu.cn/help/postmarketOS/
将软件源由特定发行版切换到master分支后，即相当于将系统转化为滚动更新模式。这样做的好处是，昨天上报的bug可能今天就被修复了，下游设备立即执行apk update; apk upgrade即可立即获取修复的更新。缺点则是是master分支的不稳定。但考虑到mobile发行版的可用性与稳定性本身就堪忧，切换至滚动更新，或许是牺牲1份稳定性，换取5分可用性。在我看来是很划算的生意。
其余暂未进一步了解的Mobile Distros Sailfish OS https://sailfishos.org/</description>
    </item>
    
    <item>
      <title>ZKV的Linux Kernel学习之路</title>
      <link>https://cerr.cc/post/linuxer_zkv/</link>
      <pubDate>Mon, 13 Jun 2022 17:41:00 +0800</pubDate>
      
      <guid>https://cerr.cc/post/linuxer_zkv/</guid>
      <description>学习资料 教程 Linux Inside 实验 Linux Kernel Lab 其他人汇总的资源 Martins3大佬的收集 获取 官方网站：
https://www.kernel.org/
直接下载到的是特定版本的压缩包，而非git仓库。网站也提供了git仓库，但clone速度感人。
官方GitHub仓库：
https://github.com/torvalds/linux
无需解释。Linus用着自己写的天下第一版本管理器开发着天下第一开源软件。
TUNA的Linux镜像：
https://mirrors.tuna.tsinghua.edu.cn/help/linux.git/
教育网的带宽、THU的经费、大佬们的维护。国内镜像站之翘楚。
Gitee镜像仓库：
https://gitee.com/mirrors/linux_old1
落后主仓库一天，用来加速clone的选择之一。
内核文档 文档资源总览：https://www.kernel.org/doc/
Latest kernel的HTML文档页：https://www.kernel.org/doc/html/latest
但用浏览器看文档总归是不如在终端内直接man 9 printk来的爽。为啥是man 9？看看man man便知：
1 Executable programs or shell commands 2 System calls (functions provided by the kernel) 3 Library calls (functions within program libraries) 4 Special files (usually found in /dev) 5 File formats and conventions, e.g. /etc/passwd 6 Games 7 Miscellaneous (including macro packages and conventions), e.</description>
    </item>
    
    <item>
      <title>记一次qemu-system-arm仿真的排错</title>
      <link>https://cerr.cc/post/qemu_armv8_dbg/</link>
      <pubDate>Thu, 26 May 2022 15:51:22 +0800</pubDate>
      
      <guid>https://cerr.cc/post/qemu_armv8_dbg/</guid>
      <description>🕵️探案 在一次尝试使用qemu-system-arm对于asuswrt的固件进行仿真运行时，出现了十分诡异的问题：整个qemu-system、linux内核、固件文件系统运行完全正常，除了在使用到openssl时：
admin@(none):/tmp/home/root# openssl [ 9.765639] openssl (274): undefined instruction: pc=b6cf31a8 [ 9.765770] CPU: 0 PID: 274 Comm: openssl Tainted: G W 4.1.17+ #10 [ 9.766031] Hardware name: Generic DT based system [ 9.766149] task: cef58b40 ti: cef80000 task.ti: cef80000 [ 9.766367] PC is at 0xb6cf31a8 [ 9.766423] LR is at 0xb6dcedb0 [ 9.766475] pc : [&amp;lt;b6cf31a8&amp;gt;] lr : [&amp;lt;b6dcedb0&amp;gt;] psr: 200b0010 [ 9.766475] sp : bee2c7c8 ip : 00000000 fp : 00000000 [ 9.</description>
    </item>
    
    <item>
      <title>CVE-2016-5195 Linux DirtyCOW漏洞分析</title>
      <link>https://cerr.cc/post/cve-2016-5195/</link>
      <pubDate>Tue, 24 May 2022 17:43:25 +0800</pubDate>
      
      <guid>https://cerr.cc/post/cve-2016-5195/</guid>
      <description>背景知识 DirtyCOW https://dirtycow.ninja/ https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails Copy on Write https://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html https://blog.csdn.net/puliao4167/article/details/87894191 Page Cache https://en.wikipedia.org/wiki/Page_cache mmap https://www.cnblogs.com/huxiao-tee/p/4660352.html 内核文件系统 https://www.cnblogs.com/huxiao-tee/p/4657851.html 条件竞争 https://ctf-wiki.github.io/ctf-wiki/pwn/linux/race-condition/introduction-zh/ 环境准备 Linux Kernel 直接下载 选取一个有漏洞的版本4.4.0，下载ubuntu对应的deb包。解压得到./boot/vmlinuz-4.4.0-31-generic
wget http://security.ubuntu.com/ubuntu/pool/main/l/linux/linux-image-4.4.0-31-generic_4.4.0-31.50_amd64.deb ar xv linux-image-4.4.0-31-generic_4.4.0-31.50_amd64.deb tar jxvf data.tar.bz2 缺点是由此得到的bootable kernel中不包含调试信息。
自行编译 获取Linux Kernel源码仓库并切换到一个有漏洞的版本4.4：
git clone https://mirrors.tuna.tsinghua.edu.cn/git/linux.git cd linux git checkout v4.4 载入x86_64的默认配置：
make x86_64_defconfig 使用Linux提供的脚本一键启用DEBUG_KERNEL、DEBUG_INFO、KGDB、GDB_SCRIPTS，关闭RANDOMIZE_BASE（kaslr）
./scripts/config --file .config -e DEBUG_KERNEL -e DEBUG_INFO -e GDB_SCRIPTS -e KGDB -d RANDOMIZE_BASE 由于是旧版kernel，需在老环境中编译。采用docker创建ubuntu16.04的编译环境：
sudo docker run -it --rm -v /home/zkv/Laboratory/dirtycow/linux:/linux ubuntu:16.</description>
    </item>
    
    <item>
      <title>关于Linux下的网卡与网络设备</title>
      <link>https://cerr.cc/post/nic/</link>
      <pubDate>Mon, 23 May 2022 23:21:12 +0800</pubDate>
      
      <guid>https://cerr.cc/post/nic/</guid>
      <description>ip与ifconfig命令输出 ~$ ip a eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:0c:29:02:e4:a7 brd ff:ff:ff:ff:ff:ff inet 192.168.188.129/24 brd 192.168.188.255 scope global dynamic noprefixroute eth0 valid_lft 1126sec preferred_lft 1126sec inet6 fe80::20c:29ff:fe02:e4a7/64 scope link noprefixroute valid_lft forever preferred_lft forever ~$ ifconfig eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 192.168.188.129 netmask 255.255.255.0 broadcast 192.168.188.255 inet6 fe80::20c:29ff:fe02:e4a7 prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; ether 00:0c:29:02:e4:a7 txqueuelen 1000 (Ethernet) RX packets 959 bytes 62153 (60.</description>
    </item>
    
    <item>
      <title>CVE-2021-3156 sudo 提权漏洞分析</title>
      <link>https://cerr.cc/post/cve-2021-3156/</link>
      <pubDate>Fri, 13 May 2022 23:02:59 +0800</pubDate>
      
      <guid>https://cerr.cc/post/cve-2021-3156/</guid>
      <description>CVE-2021-3156是sudo中存在一个堆溢出漏洞。影响从1.8.2~1.8.31p2下的所有旧版本sudo，以及1.9.0~1.9.5p1的所有稳定版sudo。可以使得任何没有特权的用户均可使用默认的sudo配置获取root权限
环境准备 使用apt获取软件源提供的sudo源码：
sudo apt source sudo 却被告知：
NOTICE: &amp;#39;sudo&amp;#39; packaging is maintained in the &amp;#39;Git&amp;#39; version control system at: https://salsa.debian.org/sudo-team/sudo.git Please use: git clone https://salsa.debian.org/sudo-team/sudo.git to retrieve the latest (possibly unreleased) updates to the package. 于是听话，从git仓库获取源码：
git clone https://salsa.debian.org/sudo-team/sudo.git 接下来进行构建：
# clone configure make git reset --hard 36955b3ef399efeea25824d32e6cfbaa444e9f07 # v1.9.5p1 CFLAGS+=-g ./configure --sysconfdir=`pwd`/examples --with-plugindir=`pwd`/plugins/sudoers/.libs make -j`nproc` 构建完成后在root用户下可以执行测试：
LD_LIBRARY_PATH=./lib/util/.libs/ src/.libs/sudo 验证编译目标的确存在漏洞，前需事先创建名为 sudoedit 的 sudo 的软链接以绕过后续检查：
cd src/.libs ln -s sudo sudoedit cd .</description>
    </item>
    
    <item>
      <title>华硕梅林固件的编译</title>
      <link>https://cerr.cc/post/compile_asuswrt-merlin/</link>
      <pubDate>Wed, 11 May 2022 16:27:10 +0800</pubDate>
      
      <guid>https://cerr.cc/post/compile_asuswrt-merlin/</guid>
      <description>获取梅林 官网如下：asuswrt-merlin.net
新梅林：https://github.com/RMerl/asuswrt-merlin.ng
旧梅林（停止开发）：https://github.com/RMerl/asuswrt-merlin
这里选用asuswrt-merlin.ng进行编译构建
wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip （下载zip而非clone仓库，节省.git的占用
环境准备 README.txt 给出了编译方式：https://github.com/RMerl/asuswrt-merlin.ng/blob/master/README.TXT
包依赖非常多，所以尽力将本地环境贴合它的编译说明，以避免未知错误。
所以选取 ubuntu:16.04 作为编译平台。
故首先安装docker，快速安装cheatsheet在此：http://zikey.vip/post/some_installation/
拉取ubuntu 16.04镜像并设定共享文件夹：
sudo docker run -it -v /home/zkv/docker_share/:/share ubuntu:16.04 依赖安装 进入docker ubuntu环境后，下载并解压梅林ng：
apt install wget unzip wget https://github.com/RMerl/asuswrt-merlin.ng/archive/refs/heads/master.zip unzip master.zip README.txt 中提到，需安装部分32位依赖包，故先添加32位软件源：
dpkg --add-architecture i386 apt update 此后便可以直接依照说明安装所有依赖包：
apt install libncurses5 libncurses5-dev m4 bison gawk flex libstdc++6-4.7-dev g++-4.7 g++ gengetopt git gitk zlib1g-dev autoconf autopoint libtool-bin shtool autogen mtd-utils intltool sharutils docbook-xsl-* libstdc++5 texinfo dos2unix xsltproc u-boot-tools device-tree-compiler qemu gperf liblzo2-dev uuid-dev build-essential lzma-dev liblzma-dev lzma binutils-dev patch cmake intltool libglib2.</description>
    </item>
    
    <item>
      <title>一些配环境的cheasheet</title>
      <link>https://cerr.cc/post/some_installation/</link>
      <pubDate>Tue, 10 May 2022 21:13:54 +0800</pubDate>
      
      <guid>https://cerr.cc/post/some_installation/</guid>
      <description>作为一个系统重装爱好者和硬件收集拾荒人，为了减少在环境配置上浪费的生命，记录常用环境配置命令用以直接复制粘贴
个人 apt 源 Linux 初始环境软件安装 基本组件 sudo apt install zsh git man man-db manpages ssh neovim tmux \ curl wget netcat net-tools nmap tcpdump figlet \ binutils xxd strace libncurses5-dev traceroute \ neofetch zip unzip ncdu htop dosfstools nyancat cmatrix 开发与调试组件 sudo apt install gcc g++ gdb gdb-multiarch gdbserver flex bison make cmake clangd \ python3 ipython3 python-is-python3 python3-pip build-essential ninja-buildw dotfiles 快速就位 git clone https://github.com/dev2ero/dotfiles.git sh -c &amp;#34;$(curl -fsSL https://gitee.</description>
    </item>
    
    <item>
      <title>构建与运行嵌入式linux虚拟机</title>
      <link>https://cerr.cc/post/build_run_embeded_linux_vm/</link>
      <pubDate>Tue, 10 May 2022 20:59:43 +0800</pubDate>
      
      <guid>https://cerr.cc/post/build_run_embeded_linux_vm/</guid>
      <description>自动挡 一路默认 通过git或http获取buildroot：
官网：https://buildroot.org/
git：git clone https://git.buildroot.net/buildroot
进入buildroot根目录，可以看到一个叫configs的文件夹，其中记录了许多硬件平台和部分qemu虚拟平台的默认配置参数。执行 ls configs | grep qemu，可以看到：
qemu_aarch64_sbsa_defconfig qemu_aarch64_virt_defconfig qemu_arm_versatile_defconfig qemu_arm_versatile_nommu_defconfig qemu_arm_vexpress_defconfig qemu_arm_vexpress_tz_defconfig qemu_m68k_mcf5208_defconfig qemu_m68k_q800_defconfig qemu_microblazebe_mmu_defconfig qemu_microblazeel_mmu_defconfig qemu_mips32r2el_malta_defconfig qemu_mips32r2_malta_defconfig qemu_mips32r6el_malta_defconfig qemu_mips32r6_malta_defconfig qemu_mips64el_malta_defconfig qemu_mips64_malta_defconfig qemu_mips64r6el_malta_defconfig qemu_mips64r6_malta_defconfig qemu_nios2_10m50_defconfig qemu_or1k_defconfig qemu_ppc64_e5500_defconfig qemu_ppc64le_powernv8_defconfig qemu_ppc64le_pseries_defconfig qemu_ppc64_pseries_defconfig qemu_ppc_bamboo_defconfig qemu_ppc_e500mc_defconfig qemu_ppc_g3beige_defconfig qemu_ppc_mac99_defconfig qemu_ppc_mpc8544ds_defconfig qemu_riscv32_virt_defconfig qemu_riscv64_virt_defconfig qemu_s390x_defconfig qemu_sh4eb_r2d_defconfig qemu_sh4_r2d_defconfig qemu_sparc64_sun4u_defconfig qemu_sparc_ss10_defconfig qemu_x86_64_defconfig qemu_x86_defconfig qemu_xtensa_lx60_defconfig qemu_xtensa_lx60_nommu_defconfig 举例来讲，我们使用 make qemu_arm_vexpress_defconfig，将qemu模拟的vexperss平台设为编译目标：
make qemu_arm_vexpress_defconfig make 或者使用 make menuconfig 手动配置。
等待编译完成，即可在output文件夹中拿到相应目标文件：
output/images/zImage # 内核 output/images/rootfs.ext2 # ext2根文件系统镜像 output/images/vexpress-v2p-ca9.</description>
    </item>
    
    <item>
      <title>Linux系统调用大全</title>
      <link>https://cerr.cc/post/linux_syscalls/</link>
      <pubDate>Sun, 08 May 2022 21:45:00 +0800</pubDate>
      
      <guid>https://cerr.cc/post/linux_syscalls/</guid>
      <description>传参规则 arch syscall NR return arg0 arg1 arg2 arg3 arg4 arg5 arm r7 r0 r0 r1 r2 r3 r4 r5 arm64 x8 x0 x0 x1 x2 x3 x4 x5 x86 eax eax ebx ecx edx esi edi ebp x86_64 rax rax rdi rsi rdx r10 r8 r9 x86_64 系统调用表 以下调用表皆基于linux4.14.0
NR syscall name %rax arg0 (%rdi) arg1 (%rsi) arg2 (%rdx) 0 read 0x00 unsigned int fd char *buf size_t count 1 write 0x01 unsigned int fd const char *buf size_t count 2 open 0x02 const char *filename int flags umode_t mode 3 close 0x03 unsigned int fd - - 4 stat 0x04 const char *filename struct __old_kernel_stat *statbuf - 5 fstat 0x05 unsigned int fd struct __old_kernel_stat *statbuf - 6 lstat 0x06 const char *filename struct __old_kernel_stat *statbuf - 7 poll 0x07 struct pollfd *ufds unsigned int nfds int timeout 8 lseek 0x08 unsigned int fd off_t offset unsigned int whence 9 mmap 0x09 ?</description>
    </item>
    
    <item>
      <title>Cross debug old version kernel using qemu-system</title>
      <link>https://cerr.cc/post/qemu_dbg_kernel/</link>
      <pubDate>Sun, 08 May 2022 19:35:11 +0800</pubDate>
      
      <guid>https://cerr.cc/post/qemu_dbg_kernel/</guid>
      <description>From this post, our goal is tracing the execution procedure from kernel entry to userspace process (busybox init) by using qemu-system and gdb-multiarch.
Preparation qemu-system-arm Compile it from source code or just use sudo apt install qemu-system-arm.
kernel Linux kernel v4.1 for armel as an example. Compiling a linux kernel requires a matched version of gcc. For example, the linux kernel v4.1 requires the gcc version between 3 and 5:</description>
    </item>
    
    <item>
      <title>关于Linux桌面的美化工作</title>
      <link>https://cerr.cc/post/beautify_de/</link>
      <pubDate>Sat, 07 May 2022 22:50:57 +0800</pubDate>
      
      <guid>https://cerr.cc/post/beautify_de/</guid>
      <description>GNU/Linux 的桌面生态，开放虽是好事，但却由此带来了混乱。没有像微软这样的赛博中央政府制定规则，就产生了眼下这般群雄割据的态势。作为用户的我能做的，也只是择巨木而栖 —— 唯二的自由巨头 KDE 与 Gnome，二选其一~~（LXQt大法好）~~（当年煮酒论DE，今日叛逃用WM）（i3大法好）。幼年气盛，爱好折腾，留下了些许美化的经验。时至今日，能回忆起的已然不多。尽力而为做些记录，为日后回归赛博左派留些盘缠。
概念拆解 被Windows驯化得温顺从良的我，当年对显示屏上花花绿绿的GUI组件并无概念。商业操作系统将一切整合，成为一个整体，迷惑我说：“这便是操作系统图形化用户接口”。今日慢慢爬出泥沼，留攻略如下：
🎵我有一台树莓派我从来不开机。接通电源、引导器醒来、启动内核、唤醒pid 1，此时来到Virtual Terminal下的/dev/tty1。在自动登录GUI的设定下，有如下朋友先后会来迎接我：
WS：Window System 图形化的基本环境 举例： X11 Wayland ref： https://en.wikipedia.org/wiki/Windowing_system DM：Display manager 图形化的登陆管理器，作用类似于login程序 可以在此选择登录后想要启动的WM或DE 举例： GDM, GNOME implementation SDDM, recommended display manager for KDE Plasma 5 and LXQt. Successor to KDM. LightDM, a lightweight, modular, cross-desktop, fully themeable desktop display manager by Canonical Ltd. ref： https://en.wikipedia.org/wiki/X_display_manager WM：Window manager 控制窗口行为的图形化子系统 举例： i3（for X11） Sway（i3 clone for Wayland） KWin Openbox ref： https://en.</description>
    </item>
    
  </channel>
</rss>
