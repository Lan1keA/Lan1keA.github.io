<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>QEMU on Zikey Vi</title>
    <link>https://cerr.cc/tags/qemu/</link>
    <description>Recent content in QEMU on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Thu, 09 Jun 2022 17:44:21 +0800</lastBuildDate><atom:link href="https://cerr.cc/tags/qemu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2015-5165 QEMU信息泄露漏洞分析</title>
      <link>https://cerr.cc/post/cve-2015-5165/</link>
      <pubDate>Thu, 09 Jun 2022 17:44:21 +0800</pubDate>
      
      <guid>https://cerr.cc/post/cve-2015-5165/</guid>
      <description>waiting </description>
    </item>
    
    <item>
      <title>记一次qemu-system-arm仿真的排错</title>
      <link>https://cerr.cc/post/qemu_armv8_dbg/</link>
      <pubDate>Thu, 26 May 2022 15:51:22 +0800</pubDate>
      
      <guid>https://cerr.cc/post/qemu_armv8_dbg/</guid>
      <description>🕵️探案 在一次尝试使用qemu-system-arm对于asuswrt的固件进行仿真运行时，出现了十分诡异的问题：整个qemu-system、linux内核、固件文件系统运行完全正常，除了在使用到openssl时：
admin@(none):/tmp/home/root# openssl [ 9.765639] openssl (274): undefined instruction: pc=b6cf31a8 [ 9.765770] CPU: 0 PID: 274 Comm: openssl Tainted: G W 4.1.17+ #10 [ 9.766031] Hardware name: Generic DT based system [ 9.766149] task: cef58b40 ti: cef80000 task.ti: cef80000 [ 9.766367] PC is at 0xb6cf31a8 [ 9.766423] LR is at 0xb6dcedb0 [ 9.766475] pc : [&amp;lt;b6cf31a8&amp;gt;] lr : [&amp;lt;b6dcedb0&amp;gt;] psr: 200b0010 [ 9.766475] sp : bee2c7c8 ip : 00000000 fp : 00000000 [ 9.</description>
    </item>
    
    <item>
      <title>构建与运行嵌入式linux虚拟机</title>
      <link>https://cerr.cc/post/build_run_embeded_linux_vm/</link>
      <pubDate>Tue, 10 May 2022 20:59:43 +0800</pubDate>
      
      <guid>https://cerr.cc/post/build_run_embeded_linux_vm/</guid>
      <description>自动挡 一路默认 通过git或http获取buildroot：
官网：https://buildroot.org/
git：git clone https://git.buildroot.net/buildroot
进入buildroot根目录，可以看到一个叫configs的文件夹，其中记录了许多硬件平台和部分qemu虚拟平台的默认配置参数。执行 ls configs | grep qemu，可以看到：
qemu_aarch64_sbsa_defconfig qemu_aarch64_virt_defconfig qemu_arm_versatile_defconfig qemu_arm_versatile_nommu_defconfig qemu_arm_vexpress_defconfig qemu_arm_vexpress_tz_defconfig qemu_m68k_mcf5208_defconfig qemu_m68k_q800_defconfig qemu_microblazebe_mmu_defconfig qemu_microblazeel_mmu_defconfig qemu_mips32r2el_malta_defconfig qemu_mips32r2_malta_defconfig qemu_mips32r6el_malta_defconfig qemu_mips32r6_malta_defconfig qemu_mips64el_malta_defconfig qemu_mips64_malta_defconfig qemu_mips64r6el_malta_defconfig qemu_mips64r6_malta_defconfig qemu_nios2_10m50_defconfig qemu_or1k_defconfig qemu_ppc64_e5500_defconfig qemu_ppc64le_powernv8_defconfig qemu_ppc64le_pseries_defconfig qemu_ppc64_pseries_defconfig qemu_ppc_bamboo_defconfig qemu_ppc_e500mc_defconfig qemu_ppc_g3beige_defconfig qemu_ppc_mac99_defconfig qemu_ppc_mpc8544ds_defconfig qemu_riscv32_virt_defconfig qemu_riscv64_virt_defconfig qemu_s390x_defconfig qemu_sh4eb_r2d_defconfig qemu_sh4_r2d_defconfig qemu_sparc64_sun4u_defconfig qemu_sparc_ss10_defconfig qemu_x86_64_defconfig qemu_x86_defconfig qemu_xtensa_lx60_defconfig qemu_xtensa_lx60_nommu_defconfig 举例来讲，我们使用 make qemu_arm_vexpress_defconfig，将qemu模拟的vexperss平台设为编译目标：
make qemu_arm_vexpress_defconfig make 或者使用 make menuconfig 手动配置。
等待编译完成，即可在output文件夹中拿到相应目标文件：
output/images/zImage # 内核 output/images/rootfs.ext2 # ext2根文件系统镜像 output/images/vexpress-v2p-ca9.</description>
    </item>
    
    <item>
      <title>Cross debug kernel using qemu-system</title>
      <link>https://cerr.cc/post/qemu_dbg_kernel/</link>
      <pubDate>Sun, 08 May 2022 19:35:11 +0800</pubDate>
      
      <guid>https://cerr.cc/post/qemu_dbg_kernel/</guid>
      <description>From this post, our goal is tracing the execution procedure from kernel entry to userspace process (busybox init) by using qemu-system and gdb-multiarch.
Preparation qemu-system-arm Compile it from source code or just use sudo apt install qemu-system-arm.
kernel Linux kernel v4.1 for armel as an example. Compiling a linux kernel requires a matched version of gcc. For example, the linux kernel v4.1 requires the gcc version between 3 and 5:</description>
    </item>
    
  </channel>
</rss>
