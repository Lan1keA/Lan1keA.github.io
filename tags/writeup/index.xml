<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeup on Zikey Vi</title>
    <link>https://cerr.cc/tags/writeup/</link>
    <description>Recent content in Writeup on Zikey Vi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2022, Zikey Vi</copyright>
    <lastBuildDate>Fri, 19 Aug 2022 17:06:58 +0800</lastBuildDate><atom:link href="https://cerr.cc/tags/writeup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSAPP Lab WriteUp</title>
      <link>https://cerr.cc/post/csapp_lab_writeup/</link>
      <pubDate>Fri, 19 Aug 2022 17:06:58 +0800</pubDate>
      
      <guid>https://cerr.cc/post/csapp_lab_writeup/</guid>
      <description>0x0 实验源：http://csapp.cs.cmu.edu/3e/labs.html
直接点击实验名视作是图以教师身份下载教学资源。题目文件应于Self-Study Handout下载
Data Lab 下载解压题目文件：
wget http://csapp.cs.cmu.edu/3e/datalab-handout.tar tar xvf datalab-handout.tar 题目说明：
http://csapp.cs.cmu.edu/3e/README-datalab
我们的任务是在受限使用运算符与控制流的前提下，实现bit.c中的每个函数的功能。
实现异或运算 异或，即 “不同时为0” 且 “不同时为1”
^，即 “~(~x&amp;amp;~y)“ 且 ”~(x&amp;amp;y)“
//1 /* * bitXor - x^y using only ~ and &amp;amp; * Example: bitXor(4, 5) = 1 * Legal ops: ~ &amp;amp; * Max ops: 14 * Rating: 1 */ int bitXor(int x, int y) { return ~(~x&amp;amp;~y)&amp;amp;~(x&amp;amp;y); } 求32位下最小的补码数值 补码，二补数，2&amp;rsquo;s complement，参见：
https://zh.wikipedia.org/zh-cn/%E4%BA%8C%E8%A3%9C%E6%95%B8
32位下，最小的补码数值为1000000000000000000000000000000
补码10000000为什么可以表示-128？而非0、128？参见：
https://www.zhihu.com/question/28685048</description>
    </item>
    
  </channel>
</rss>
